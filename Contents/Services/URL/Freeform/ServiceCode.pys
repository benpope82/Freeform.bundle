HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36'}
NAMESPACE = {'a': 'http://abc.go.com/vp2/ws/xmlns'}
DATA_URL = 'http://api.contents.watchabc.go.com/vp2/ws/s/contents/3000/videos/002/001/-1/-1/-1/%s/-1/-1?v=08.00'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	xml = GetDataURL(url)
	show_title = xml.xpath('//a:video/a:title/text()', namespaces=NAMESPACE)[0]
	if ' : ' in show_title or  ' | ' in show_title:
		episode_title = show_title.split(' | ')[1].split(' : ')[1]
		show_title = show_title.split(' | ')[0].split(' : ')[0]
	else:
		episode_title = show_title
	summary = xml.xpath('//a:video/a:longdescription/text()', namespaces=NAMESPACE)[0]
	duration = xml.xpath('//a:video/a:duration/text()', namespaces=NAMESPACE)[0]
	airdate = xml.xpath('//a:video/a:airdates/a:airdate/text()', namespaces=NAMESPACE)[0]
	date = Datetime.ParseDate(airdate)
	index = xml.xpath('//a:video/a:episodenumber/text()', namespaces=NAMESPACE)[0]
	season = xml.xpath('//a:video/a:season/@num', namespaces=NAMESPACE)[0]
	thumb = xml.xpath('//a:video/a:thumbnails/a:thumbnail/text()', namespaces=NAMESPACE)[0]

	return EpisodeObject(
		show = show_title,
		title = episode_title,
		season = int(season) if season else None,
		index = int(index) if index else None,
		duration = int(duration) if duration else None,
		originally_available_at = date,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	video_id = GetVideoId(url)

	if not video_id:
		raise Ex.MediaNotAvailable

	storage_id = 1571

	f4m_url = 'http://cdnapi.kaltura.com/p/585231/sp/58523100/playManifest/entryId/%s/format/http/protocol/http/cdnHost/cdnbakmi.kaltura.com/storageId/%d/uiConfId/8628152/tags/uplynk/a/a.f4m' % (video_id, storage_id)

	return [
		MediaObject(
			protocol = 'hls',
			container = 'mpegts',
			video_codec = VideoCodec.H264,
			video_resolution = '1080',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [
				PartObject(
					key = Callback(PlayVideo, f4m_url=f4m_url, post_url=f4m_url, ext='m3u8')
				)
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(f4m_url=None, **kwargs):

	if not f4m_url:
		raise Ex.MediaNotAvailable

	try:
		xml = XML.ElementFromURL(f4m_url)
		video_url = xml.xpath('//a:media/@url', namespaces={'a': 'http://ns.adobe.com/f4m/1.0'})[0]
		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
	except:
		raise Ex.MediaNotAvailable

####################################################################################################
def GetVideoId(url):

	if 'VDKA' in url:
		video_id = url.split('VDKA')[-1].split('/')[0].split('#')[0]
	else:
		try: video_id = HTML.ElementFromURL(url, headers=HTTP_HEADERS, cacheTime=CACHE_1HOUR).xpath('//div[@id="playerContainer"]/@data-video-id')
		except: video_id = None

	return video_id

####################################################################################################
def GetDataURL(url):

	video_id = GetVideoId(url)
    
	if video_id:
		try: xml = XML.ElementFromURL(DATA_URL %video_id)
		except: xml = None
	
	if xml:
		return xml
	else:
		raise Ex.MediaNotAvailable
